import { useMemo } from "react"

import { useBudgetDisplay } from "~/components/budget"

import { usePeerSpending } from "./usePeerSpending"

/**
 * Êï¥ÂêàÂêåË°åÊéíË°åÊ¶ú‰∏öÂä° Hook
 *
 * ËÆæËÆ°ÂéüÂàô (ÂõõÂ∏àÂçè‰Ωú):
 * üêß Linus: "‰∏öÂä°ÈÄªËæëË¶ÅÁÆÄÊ¥ÅÔºåÊï∞ÊçÆÊï¥ÂêàË¶ÅÈ´òÊïà"
 * ‚öõÔ∏è Dan: "‰∏äÂ±ÇHookÊï¥ÂêàÂ∫ïÂ±ÇÊï∞ÊçÆÊ∫êÔºåÊèê‰æõÁªü‰∏Ä‰∏öÂä°ËßÜÂõæ"
 * ‚òï Bloch: "APIËÆæËÆ°Ë¶ÅÂÆåÊï¥ÔºåÊ∂µÁõñÊâÄÊúâ‰∏öÂä°ÈúÄÊ±Ç"
 * üèõÔ∏è Fowler: "È¢ÜÂüüÈ©±Âä®ËÆæËÆ°ÔºåÂÆåÊï¥ÁöÑÊéíË°åÊ¶úËÅöÂêàÊ†π"
 */

/** Êï¥ÂêàÊéíË°åÊ¶úÊï∞ÊçÆ */
export interface CombinedSpendingRankingData {
  /** ÈîôËØØ‰ø°ÊÅØ */
  error: null | string
  /** ÊòØÂê¶Ê≠£Âú®Âä†ËΩΩÔºàÈÅµÂæ™SWRÊ®°ÂºèÔºâ */
  loading: boolean
  /** ÊéíË°åÊ¶úÂèÇ‰∏éËÄÖÂàóË°®ÔºàÊåâÊ∂àË¥πÊéíÂ∫èÔºâ */
  rankings: RankingParticipant[]
  /** Ê±áÊÄªÁªüËÆ°‰ø°ÊÅØ */
  summary: RankingSummary
}

/** ÊéíË°åÊ¶úÂèÇ‰∏éËÄÖ‰ø°ÊÅØ */
export interface RankingParticipant {
  /** ÊòæÁ§∫ÂêçÁß∞ */
  displayName: string
  /** ÊòØÂê¶‰∏∫ÂΩìÂâçÁî®Êà∑ */
  isCurrentUser: boolean
  /** Áõ∏ÂØπÁôæÂàÜÊØîÔºàÂü∫‰∫éÊúÄÈ´òÊ∂àË¥πÔºâ */
  percentage: number
  /** ÊéíÂêç‰ΩçÁΩÆ */
  rank: number
  /** ‰ªäÊó•Ê∂àË¥πÈáëÈ¢ù */
  spentToday: number
}

/** ÊéíË°åÊ¶úÊ±áÊÄªÁªüËÆ° */
export interface RankingSummary {
  /** Âπ≥ÂùáÊ∂àË¥πÔºàÂåÖÂê´ÂΩìÂâçÁî®Êà∑Ôºâ */
  averageSpent: number
  /** ÂΩìÂâçÁî®Êà∑ÊéíÂêç */
  currentUserRank: number
  /** ÊÄªÂèÇ‰∏é‰∫∫Êï∞ÔºàÂåÖÂê´ÂΩìÂâçÁî®Êà∑Ôºâ */
  totalParticipants: number
  /** ÊÄªÊ∂àË¥πÈáëÈ¢ùÔºàÂåÖÂê´ÂΩìÂâçÁî®Êà∑Ôºâ */
  totalSpent: number
}

/**
 * Êï¥Âêà‰πòÂÆ¢Ê∂àË¥πÊéíË°åÊ¶ú‰∏öÂä°Hook
 *
 * ËÅåË¥£Ôºö
 * 1. Êï¥ÂêàÂêåË°åÊï∞ÊçÆÂíåÂΩìÂâçÁî®Êà∑È¢ÑÁÆóÊï∞ÊçÆ
 * 2. ËÆ°ÁÆóÂÆåÊï¥ÁöÑÊ∂àË¥πÊéíË°åÊ¶ú
 * 3. Êèê‰æõÁªü‰∏ÄÁöÑ‰∏öÂä°Êï∞ÊçÆËßÜÂõæ
 * 4. Êô∫ËÉΩÂ§ÑÁêÜÂ§öÊï∞ÊçÆÊ∫êÁöÑÁä∂ÊÄÅÁÆ°ÁêÜ
 */
export function useCombinedSpendingRanking(): CombinedSpendingRankingData {
  // Â∫ïÂ±ÇÊï∞ÊçÆÊ∫ê
  const {
    data: peerData,
    error: peerError,
    loading: peerLoading
  } = usePeerSpending()
  const {
    budgetData,
    error: budgetError,
    loading: budgetLoading
  } = useBudgetDisplay()

  // Êï∞ÊçÆÊï¥ÂêàÂíåÊéíË°åÊ¶úËÆ°ÁÆó
  const rankingResult = useMemo(() => {
    // Â¶ÇÊûú‰ªª‰∏ÄÊï∞ÊçÆÊ∫êÂá∫ÈîôÔºåËøîÂõûÈîôËØØÁä∂ÊÄÅ
    const error = peerError || budgetError
    if (error) {
      return {
        error,
        loading: false,
        rankings: [],
        summary: {
          averageSpent: 0,
          currentUserRank: 0,
          totalParticipants: 0,
          totalSpent: 0
        }
      }
    }

    // Â¶ÇÊûúÊ≤°ÊúâÂêåË°åÊï∞ÊçÆÔºåËøîÂõûÁ©∫Áä∂ÊÄÅÔºàËøôÊòØÊ≠£Â∏∏ÊÉÖÂÜµÔºåÂèØËÉΩ‰∏çÂú®Êª¥Êª¥ËΩ¶Ê®°ÂºèÔºâ
    if (!peerData || !peerData.topPeers.length) {
      return {
        error: null,
        loading: peerLoading && !peerData, // ÈÅµÂæ™SWRÊ®°Âºè
        rankings: [],
        summary: {
          averageSpent: 0,
          currentUserRank: 0,
          totalParticipants: 0,
          totalSpent: 0
        }
      }
    }

    // Ëé∑ÂèñÂΩìÂâçÁî®Êà∑Ê∂àË¥πÊï∞ÊçÆ
    const currentUserSpent = budgetData?.dailySpent ?? 0

    // Êï¥ÂêàÊâÄÊúâÂèÇ‰∏éËÄÖÊï∞ÊçÆ
    const allParticipants = [
      // ÂêåË°åÊï∞ÊçÆ
      ...peerData.topPeers.map((peer) => ({
        displayName: peer.displayName,
        isCurrentUser: false,
        spentToday: peer.spentToday
      })),
      // ÂΩìÂâçÁî®Êà∑Êï∞ÊçÆ
      {
        displayName: "‰Ω†",
        isCurrentUser: true,
        spentToday: currentUserSpent
      }
    ]

    // ÊåâÊ∂àË¥πÈáëÈ¢ùÊéíÂ∫è
    const sortedParticipants = allParticipants.sort(
      (a, b) => b.spentToday - a.spentToday
    )

    // ËÆ°ÁÆóÊéíÂêçÂíåÁôæÂàÜÊØî
    const maxSpent = Math.max(...sortedParticipants.map((p) => p.spentToday))
    const rankings: RankingParticipant[] = sortedParticipants.map(
      (participant, index) => ({
        ...participant,
        percentage:
          maxSpent > 0 ? (participant.spentToday / maxSpent) * 100 : 0,
        rank: index + 1
      })
    )

    // ËÆ°ÁÆóÊ±áÊÄªÁªüËÆ°
    const totalSpent = sortedParticipants.reduce(
      (sum, p) => sum + p.spentToday,
      0
    )
    const averageSpent = totalSpent / sortedParticipants.length
    const currentUserRank = rankings.find((r) => r.isCurrentUser)?.rank ?? 0

    return {
      error: null,
      loading: (peerLoading && !peerData) || (budgetLoading && !budgetData), // SWRÊ®°Âºè
      rankings,
      summary: {
        averageSpent: Math.round(averageSpent * 100) / 100,
        currentUserRank,
        totalParticipants: sortedParticipants.length,
        totalSpent: Math.round(totalSpent * 100) / 100
      }
    }
  }, [peerData, peerError, peerLoading, budgetData, budgetError, budgetLoading])

  return rankingResult
}
